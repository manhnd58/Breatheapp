private class TaskListCell extends ListCell<LinkTasksAndCal> {
        private final Label titleLabel = new Label();
        private final Label timeLabel = new Label();
        private final CheckBox completedCheckBox = new CheckBox();
        private final VBox content = new VBox(5);
        private final ContextMenu contextMenu = new ContextMenu();
        private final MenuItem editItem = new MenuItem("Edit");
        private final MenuItem duplicateItem = new MenuItem("Duplicate");
        private final MenuItem deleteItem = new MenuItem("Delete");
        private final MenuItem scheduleItem = new MenuItem("Schedule Task");

        public TaskListCell() {
            content.setPadding(new Insets(10));
            content.setBackground(new Background(new BackgroundFill(Color.web("#F5F8FA"), new CornerRadii(8), null)));
            content.setBorder(new Border(new BorderStroke(Color.web("#E0ECEF"), BorderStrokeStyle.SOLID, new CornerRadii(8), new BorderWidths(1))));
            content.setEffect(new DropShadow(5, 0, 1, Color.gray(0.1)));

            HBox header = new HBox(10, completedCheckBox, titleLabel);
            header.setAlignment(Pos.CENTER_LEFT);
            content.getChildren().addAll(header, timeLabel);

            completedCheckBox.setOnAction(e -> {
                LinkTasksAndCal task = getItem();
                if (task != null) {
                    task.setCompleted(completedCheckBox.isSelected());
                    updateCompletionProgress();
                    checkOverdueTasks(); // Update notifications
                    // Update the calendar view if open
                    if (calendarApp != null && CalendarApp.getCalendarStage() != null) {
                        BorderPane root = (BorderPane) CalendarApp.getCalendarStage().getScene().getRoot();
                        ScrollPane scrollPane = (ScrollPane) root.getCenter();
                        StackPane contentPane = (StackPane) scrollPane.getContent();
                        VBox hoursBox = (VBox) contentPane.getChildren().get(1);
                        calendarApp.updateEventsDisplay(hoursBox);
                    }
                }
            });

            content.setOnMouseEntered(e -> {
                content.setEffect(new DropShadow(10, 0, 2, Color.gray(0.2)));
                content.setScaleX(1.01);
                content.setScaleY(1.01);
            });
            content.setOnMouseExited(e -> {
                content.setEffect(new DropShadow(5, 0, 1, Color.gray(0.1)));
                content.setScaleX(1.0);
                content.setScaleY(1.0);
            });

            contextMenu.getItems().addAll(editItem, duplicateItem, deleteItem, scheduleItem);
            setOnMouseClicked(e -> {
                if (!isEmpty() && e.getButton() == MouseButton.SECONDARY) {
                    contextMenu.show(this, e.getScreenX(), e.getScreenY());
                } else {
                    contextMenu.hide();
                }
            });

            editItem.setOnAction(e -> showAddEditTaskDialog(getItem()));
            duplicateItem.setOnAction(e -> {
                LinkTasksAndCal original = getItem();
                if (original != null) {
                    LinkTasksAndCal newTask = new LinkTasksAndCal(
                        original.getTitle() + " (Copy)", 
                        original.getStartTime(), 
                        original.getEndTime(), 
                        false
                    );
                    newTask.setDescription(original.getDescription());
                    newTask.setDuration(original.getDuration());
                    newTask.setTimeSpentHours(original.getTimeSpentHours());
                    newTask.setTimeSpentMinutes(original.getTimeSpentMinutes());
                    newTask.setRecurrence(original.getRecurrence());
                    newTask.setPriority(original.getPriority());
                    sharedTasks.add(newTask);
                    updateCompletionProgress();
                }
            });
            deleteItem.setOnAction(e -> {
                LinkTasksAndCal task = getItem();
                if (task != null) {
                    sharedTasks.remove(task);
                    updateCompletionProgress();
                }
            });
            scheduleItem.setOnAction(e -> showAddEditTaskDialog(getItem()));

            setOnDragOver(event -> {
                if (event.getGestureSource() != this && event.getDragboard().hasString()) {
                    event.acceptTransferModes(TransferMode.MOVE);
                }
                event.consume();
            });

            setOnDragDropped(event -> {
                Dragboard db = event.getDragboard();
                boolean success = false;
                if (db.hasString()) {
                    String taskId = db.getString();
                    LinkTasksAndCal draggedTask = sharedTasks.stream()
                            .filter(t -> t.getId().equals(taskId))
                            .findFirst()
                            .orElse(null);
                    if (draggedTask != null) {
                        int draggedIndex = sharedTasks.indexOf(draggedTask);
                        int dropIndex = sharedTasks.indexOf(getItem());
                        sharedTasks.remove(draggedIndex);
                        sharedTasks.add(dropIndex, draggedTask);
                        success = true;
                    }
                }
                event.setDropCompleted(success);
                event.consume();
            });
        }

        @Override
        protected void updateItem(LinkTasksAndCal task, boolean empty) {
            super.updateItem(task, empty);
            if (empty || task == null) {
                setGraphic(null);
                setContextMenu(null);
            } else {
                titleLabel.setText(task.getTitle() + " [" + task.getPriority() + "]");
                titleLabel.setFont(Font.font("Arial", FontWeight.BOLD, 14));
                titleLabel.setTextFill(Color.web("#2D3E50"));
                // Strike through if completed
                titleLabel.setStrikethrough(task.isCompleted());

                completedCheckBox.setSelected(task.isCompleted());

                String timeText = "";
                boolean isOverdue = task.getEndTime() != null && 
                                  LocalDateTime.now().isAfter(task.getEndTime()) && 
                                  !task.isCompleted();
                if (task.getStartTime() != null && task.getEndTime() != null) {
                    timeText = dateTimeFormatter.format(task.getStartTime()) + " - " + 
                             dateTimeFormatter.format(task.getEndTime());
                } else if (task.getEndTime() != null) {
                    timeText = "Due: " + dateTimeFormatter.format(task.getEndTime());
                } else {
                    timeText = "No scheduled time";
                }
                timeLabel.setText(timeText);
                timeLabel.setFont(Font.font("Arial", 12));
                timeLabel.setTextFill(isOverdue ? Color.RED : Color.web("#2D3E50"));

                content.setBorder(new Border(new BorderStroke(
                    isOverdue ? Color.RED : Color.web("#E0ECEF"),
                    BorderStrokeStyle.SOLID,
                    new CornerRadii(8),
                    new BorderWidths(isOverdue ? 2 : 1)
                )));

                setGraphic(content);
                setContextMenu(contextMenu);
            }
        }
    }
