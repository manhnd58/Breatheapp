private HBox createCompactTaskView(LinkTasksAndCalModel linkTasksAndCal, VBox targetEventsBox) {
        HBox compactView = new HBox(3);
        compactView.setPadding(new Insets(1));
        compactView.setBackground(new Background(new BackgroundFill(Color.web("#F5F8FA"), new CornerRadii(4), null)));
        compactView.setBorder(new Border(new BorderStroke(Color.web("#E0ECEF"), BorderStrokeStyle.SOLID, new CornerRadii(4), new BorderWidths(1))));
        compactView.setEffect(new DropShadow(2, 0, 1, Color.gray(0.1)));

        Label titleLabel = new Label(linkTasksAndCal.getTitle() + " [" + linkTasksAndCal.getPriority() + "]");
        titleLabel.setFont(Font.font("Arial", FontWeight.BOLD, 10));
        titleLabel.setTextFill(Color.web("#2D3E50"));
        titleLabel.setWrapText(true);
        titleLabel.setPrefWidth(400);
        titleLabel.setMaxWidth(400);
        titleLabel.setStrikethrough(linkTasksAndCal.isCompleted()); // Add strikethrough if completed
        HBox.setHgrow(titleLabel, Priority.ALWAYS);

        Label timeLabel = new Label();
        String timeText = linkTasksAndCal.getStartTime() != null ? timeFormatter.format(linkTasksAndCal.getStartTime()) : "";
        timeLabel.setText(timeText);
        timeLabel.setFont(Font.font("Arial", 8));
        timeLabel.setTextFill(Color.web("#2D3E50"));
        timeLabel.setWrapText(true);
        timeLabel.setPrefWidth(150);
        timeLabel.setMaxWidth(150);
        HBox.setHgrow(timeLabel, Priority.NEVER);

        compactView.getChildren().addAll(titleLabel, timeLabel);

        ContextMenu contextMenu = new ContextMenu();
        MenuItem editItem = new MenuItem("Edit");
        MenuItem deleteItem = new MenuItem("Delete");
        MenuItem moveToTaskListItem = new MenuItem("Move to Task List");

        editItem.setOnAction(e -> {
            if (Tasks.getMainStage() == null) {
                Tasks mainApp = new Tasks();
                Stage mainStage = new Stage();
                mainApp.start(mainStage);
            }
            new Tasks().showAddEditTaskDialog(linkTasksAndCal);
        });

        deleteItem.setOnAction(e -> {
            Tasks.sharedTasks.remove(linkTasksAndCal);
        });

        moveToTaskListItem.setOnAction(e -> {
            linkTasksAndCal.setStartTime(null);
            linkTasksAndCal.setEndTime(null);
            updateEventsDisplay((VBox) ((HBox) targetEventsBox.getParent()).getParent());
        });

        contextMenu.getItems().addAll(editItem, deleteItem, moveToTaskListItem);

        compactView.setOnMouseClicked(e -> {
            if (e.getButton() == MouseButton.PRIMARY) {
                int index = targetEventsBox.getChildren().indexOf(compactView);
                targetEventsBox.getChildren().set(index, createDetailedTaskView(linkTasksAndCal, targetEventsBox));
            } else if (e.getButton() == MouseButton.SECONDARY) {
                contextMenu.show(compactView, e.getScreenX(), e.getScreenY());
            }
        });

        compactView.setOnDragDetected(event -> {
            Dragboard db = compactView.startDragAndDrop(TransferMode.MOVE);
            ClipboardContent content = new ClipboardContent();
            content.putString(String.valueOf(linkTasksAndCal.getId()));
            db.setContent(content);
            event.consume();
        });

        compactView.setOnMouseEntered(e -> {
            compactView.setEffect(new DropShadow(4, 0, 2, Color.gray(0.2)));
            compactView.setScaleX(1.01);
            compactView.setScaleY(1.01);
        });
        compactView.setOnMouseExited(e -> {
            compactView.setEffect(new DropShadow(2, 0, 1, Color.gray(0.1)));
            compactView.setScaleX(1.0);
            compactView.setScaleY(1.0);
        });

        return compactView;
    }

    private VBox createDetailedTaskView(LinkTasksAndCalModel linkTasksAndCalsk, VBox targetEventsBox) {
        VBox detailedView = new VBox(1);
        detailedView.setPadding(new Insets(2));
        detailedView.setBackground(new Background(new BackgroundFill(Color.web("#F5F8FA"), new CornerRadii(4), null)));
        detailedView.setBorder(new Border(new BorderStroke(Color.web("#E0ECEF"), BorderStrokeStyle.SOLID, new CornerRadii(4), new BorderWidths(1))));
        detailedView.setEffect(new DropShadow(2, 0, 1, Color.gray(0.1)));

        Label titleLabel = new Label(linkTasksAndCalsk.getTitle() + " [" + linkTasksAndCalsk.getPriority() + "]");
        titleLabel.setFont(Font.font("Arial", FontWeight.BOLD, 10));
        titleLabel.setTextFill(Color.web("#2D3E50"));
        titleLabel.setWrapText(true);
        titleLabel.setPrefWidth(400);
        titleLabel.setMaxWidth(400);
        titleLabel.setStrikethrough(linkTasksAndCalsk.isCompleted()); // Add strikethrough if completed

        Label timeLabel = new Label();
        String timeText = "";
        if (linkTasksAndCalsk.getStartTime() != null && linkTasksAndCalsk.getEndTime() != null) {
            timeText = timeFormatter.format(linkTasksAndCalsk.getStartTime()) + " - " + timeFormatter.format(linkTasksAndCalsk.getEndTime());
            timeLabel.setTextFill(LocalDateTime.now().isAfter(linkTasksAndCalsk.getEndTime()) && !linkTasksAndCalsk.isCompleted() ? Color.RED : Color.web("#2D3E50"));
        } else if (linkTasksAndCalsk.getEndTime() != null) {
            timeText = "Hết hạn: " + timeFormatter.format(linkTasksAndCalsk.getEndTime());
            timeLabel.setTextFill(LocalDateTime.now().isAfter(linkTasksAndCalsk.getEndTime()) && !linkTasksAndCalsk.isCompleted() ? Color.RED : Color.web("#2D3E50"));
        }
        timeLabel.setText(timeText);
        timeLabel.setFont(Font.font("Arial", 8));
        timeLabel.setTextFill(Color.web("#2D3E50"));
        timeLabel.setWrapText(true);
        timeLabel.setPrefWidth(150);
        timeLabel.setMaxWidth(150);

        Label descriptionLabel = new Label(linkTasksAndCalsk.getDescription());
        descriptionLabel.setFont(Font.font("Arial", 8));
        descriptionLabel.setTextFill(Color.web("#2D3E50"));
        descriptionLabel.setWrapText(true);
        descriptionLabel.setPrefWidth(400);
        descriptionLabel.setMaxWidth(400);

        detailedView.getChildren().addAll(titleLabel, timeLabel, descriptionLabel);

        ContextMenu contextMenu = new ContextMenu();
        MenuItem editItem = new MenuItem("Edit");
        MenuItem deleteItem = new MenuItem("Delete");
        MenuItem moveToTaskListItem = new MenuItem("Move to Task List");

        editItem.setOnAction(e -> {
            if (Tasks.getMainStage() == null) {
                Tasks mainApp = new Tasks();
                Stage mainStage = new Stage();
                mainApp.start(mainStage);
            }
            new Tasks().showAddEditTaskDialog(linkTasksAndCalsk);
        });

        deleteItem.setOnAction(e -> {
            Tasks.sharedTasks.remove(linkTasksAndCalsk);
        });

        moveToTaskListItem.setOnAction(e -> {
            linkTasksAndCalsk.setStartTime(null);
            linkTasksAndCalsk.setEndTime(null);
            updateEventsDisplay((VBox) ((HBox) targetEventsBox.getParent()).getParent());
        });

        contextMenu.getItems().addAll(editItem, deleteItem, moveToTaskListItem);

        detailedView.setOnMouseClicked(e -> {
            if (e.getButton() == MouseButton.PRIMARY) {
                int index = targetEventsBox.getChildren().indexOf(detailedView);
                targetEventsBox.getChildren().set(index, createCompactTaskView(linkTasksAndCalsk, targetEventsBox));
            } else if (e.getButton() == MouseButton.SECONDARY) {
                contextMenu.show(detailedView, e.getScreenX(), e.getScreenY());
            }
        });

        detailedView.setOnDragDetected(event -> {
            Dragboard db = detailedView.startDragAndDrop(TransferMode.MOVE);
            ClipboardContent content = new ClipboardContent();
            content.putString(String.valueOf(linkTasksAndCalsk.getId()));
            db.setContent(content);
            event.consume();
        });

        detailedView.setOnMouseEntered(e -> {
            detailedView.setEffect(new DropShadow(4, 0, 2, Color.gray(0.2)));
            detailedView.setScaleX(1.01);
            detailedView.setScaleY(1.01);
        });
        detailedView.setOnMouseExited(e -> {
            detailedView.setEffect(new DropShadow(2, 0, 1, Color.gray(0.1)));
            detailedView.setScaleX(1.0);
            detailedView.setScaleY(1.0);
        });

        return detailedView;
    }

